{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveDisplayValue = toHaveDisplayValue;\n\nvar _utils = require(\"./utils\");\n\nfunction toHaveDisplayValue(htmlElement, expectedValue) {\n  var _this = this;\n\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveDisplayValue, this);\n  var tagName = htmlElement.tagName.toLowerCase();\n\n  if (!['select', 'input', 'textarea'].includes(tagName)) {\n    throw new Error('.toHaveDisplayValue() currently supports only input, textarea or select elements, try with another matcher instead.');\n  }\n\n  if (tagName === 'input' && ['radio', 'checkbox'].includes(htmlElement.type)) {\n    throw new Error(\".toHaveDisplayValue() currently does not support input[type=\\\"\".concat(htmlElement.type, \"\\\"], try with another matcher instead.\"));\n  }\n\n  var values = getValues(tagName, htmlElement);\n  var expectedValues = getExpectedValues(expectedValue);\n  var numberOfMatchesWithValues = expectedValues.filter(function (expected) {\n    return values.some(function (value) {\n      return expected instanceof RegExp ? expected.test(value) : _this.equals(value, String(expected));\n    });\n  }).length;\n  var matchedWithAllValues = numberOfMatchesWithValues === values.length;\n  var matchedWithAllExpectedValues = numberOfMatchesWithValues === expectedValues.length;\n  return {\n    pass: matchedWithAllValues && matchedWithAllExpectedValues,\n    message: function message() {\n      return (0, _utils.getMessage)(_this, _this.utils.matcherHint(\"\".concat(_this.isNot ? '.not' : '', \".toHaveDisplayValue\"), 'element', ''), \"Expected element \".concat(_this.isNot ? 'not ' : '', \"to have display value\"), expectedValue, 'Received', values);\n    }\n  };\n}\n\nfunction getValues(tagName, htmlElement) {\n  return tagName === 'select' ? Array.from(htmlElement).filter(function (option) {\n    return option.selected;\n  }).map(function (option) {\n    return option.textContent;\n  }) : [htmlElement.value];\n}\n\nfunction getExpectedValues(expectedValue) {\n  return expectedValue instanceof Array ? expectedValue : [expectedValue];\n}","map":null,"metadata":{},"sourceType":"script"}