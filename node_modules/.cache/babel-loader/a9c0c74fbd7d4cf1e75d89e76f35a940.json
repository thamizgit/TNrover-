{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:\\\\Users\\\\thami\\\\nammaooru\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\thami\\\\nammaooru\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMouseEventOptions = getMouseEventOptions;\n\nfunction isMousePressEvent(event) {\n  return event === 'mousedown' || event === 'mouseup' || event === 'click' || event === 'dblclick';\n} // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n\n\nvar BUTTONS_NAMES = {\n  none: 0,\n  primary: 1,\n  secondary: 2,\n  auxiliary: 4\n}; // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n\nvar BUTTON_NAMES = {\n  primary: 0,\n  auxiliary: 1,\n  secondary: 2\n};\n\nfunction translateButtonNumber(value, from) {\n  var _Object$entries$find;\n\n  var _ref = from === 'button' ? [BUTTON_NAMES, BUTTONS_NAMES] : [BUTTONS_NAMES, BUTTON_NAMES],\n      _ref2 = _slicedToArray(_ref, 2),\n      mapIn = _ref2[0],\n      mapOut = _ref2[1];\n\n  var name = (_Object$entries$find = Object.entries(mapIn).find(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        i = _ref4[1];\n\n    return i === value;\n  })) == null ? void 0 : _Object$entries$find[0]; // istanbul ignore next\n\n  return name && Object.prototype.hasOwnProperty.call(mapOut, name) ? mapOut[name] : 0;\n}\n\nfunction convertMouseButtons(event, init, property) {\n  if (!isMousePressEvent(event)) {\n    return 0;\n  }\n\n  if (typeof init[property] === 'number') {\n    return init[property];\n  } else if (property === 'button' && typeof init.buttons === 'number') {\n    return translateButtonNumber(init.buttons, 'buttons');\n  } else if (property === 'buttons' && typeof init.button === 'number') {\n    return translateButtonNumber(init.button, 'button');\n  }\n\n  return property != 'button' && isMousePressEvent(event) ? 1 : 0;\n}\n\nfunction getMouseEventOptions(event, init) {\n  var clickCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  var _init;\n\n  init = (_init = init) != null ? _init : {};\n  return _objectSpread({}, init, {\n    // https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail\n    detail: event === 'mousedown' || event === 'mouseup' || event === 'click' ? 1 + clickCount : clickCount,\n    buttons: convertMouseButtons(event, init, 'buttons'),\n    button: convertMouseButtons(event, init, 'button')\n  });\n}","map":null,"metadata":{},"sourceType":"script"}