{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toBeChecked = toBeChecked;\n\nvar _ariaQuery = require(\"aria-query\");\n\nvar _utils = require(\"./utils\");\n\nfunction toBeChecked(element) {\n  var _this = this;\n\n  (0, _utils.checkHtmlElement)(element, toBeChecked, this);\n\n  var isValidInput = function isValidInput() {\n    return element.tagName.toLowerCase() === 'input' && ['checkbox', 'radio'].includes(element.type);\n  };\n\n  var isValidAriaElement = function isValidAriaElement() {\n    return roleSupportsChecked(element.getAttribute('role')) && ['true', 'false'].includes(element.getAttribute('aria-checked'));\n  };\n\n  if (!isValidInput() && !isValidAriaElement()) {\n    return {\n      pass: false,\n      message: function message() {\n        return \"only inputs with type=\\\"checkbox\\\" or type=\\\"radio\\\" or elements with \".concat(supportedRolesSentence(), \" and a valid aria-checked attribute can be used with .toBeChecked(). Use .toHaveValue() instead\");\n      }\n    };\n  }\n\n  var isChecked = function isChecked() {\n    if (isValidInput()) return element.checked;\n    return element.getAttribute('aria-checked') === 'true';\n  };\n\n  return {\n    pass: isChecked(),\n    message: function message() {\n      var is = isChecked() ? 'is' : 'is not';\n      return [_this.utils.matcherHint(\"\".concat(_this.isNot ? '.not' : '', \".toBeChecked\"), 'element', ''), '', \"Received element \".concat(is, \" checked:\"), \"  \".concat(_this.utils.printReceived(element.cloneNode(false)))].join('\\n');\n    }\n  };\n}\n\nfunction supportedRolesSentence() {\n  return (0, _utils.toSentence)(supportedRoles().map(function (role) {\n    return \"role=\\\"\".concat(role, \"\\\"\");\n  }), {\n    lastWordConnector: ' or '\n  });\n}\n\nfunction supportedRoles() {\n  return _ariaQuery.roles.keys().filter(roleSupportsChecked);\n}\n\nfunction roleSupportsChecked(role) {\n  var _roles$get;\n\n  return ((_roles$get = _ariaQuery.roles.get(role)) == null ? void 0 : _roles$get.props['aria-checked']) !== undefined;\n}","map":null,"metadata":{},"sourceType":"script"}