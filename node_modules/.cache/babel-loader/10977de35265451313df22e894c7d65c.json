{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"E:\\\\tnrover\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _defineProperty = require(\"E:\\\\tnrover\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"E:\\\\tnrover\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveFormValues = toHaveFormValues;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _isEqualWith = _interopRequireDefault(require(\"lodash/isEqualWith\"));\n\nvar _uniq = _interopRequireDefault(require(\"lodash/uniq\"));\n\nvar _css = _interopRequireDefault(require(\"css.escape\"));\n\nvar _utils = require(\"./utils\"); // Returns the combined value of several elements that have the same name\n// e.g. radio buttons or groups of checkboxes\n\n\nfunction getMultiElementValue(elements) {\n  var types = (0, _uniq.default)(elements.map(function (element) {\n    return element.type;\n  }));\n\n  if (types.length !== 1) {\n    throw new Error('Multiple form elements with the same name must be of the same type');\n  }\n\n  switch (types[0]) {\n    case 'radio':\n      {\n        var theChosenOne = elements.find(function (radio) {\n          return radio.checked;\n        });\n        return theChosenOne ? theChosenOne.value : undefined;\n      }\n\n    case 'checkbox':\n      return elements.filter(function (checkbox) {\n        return checkbox.checked;\n      }).map(function (checkbox) {\n        return checkbox.value;\n      });\n\n    default:\n      // NOTE: Not even sure this is a valid use case, but just in case...\n      return elements.map(function (element) {\n        return element.value;\n      });\n  }\n}\n\nfunction getFormValue(container, name) {\n  var elements = _toConsumableArray(container.querySelectorAll(\"[name=\\\"\".concat((0, _css.default)(name), \"\\\"]\")));\n  /* istanbul ignore if */\n\n\n  if (elements.length === 0) {\n    return undefined; // shouldn't happen, but just in case\n  }\n\n  switch (elements.length) {\n    case 1:\n      return (0, _utils.getSingleElementValue)(elements[0]);\n\n    default:\n      return getMultiElementValue(elements);\n  }\n} // Strips the `[]` suffix off a form value name\n\n\nfunction getPureName(name) {\n  return /\\[\\]$/.test(name) ? name.slice(0, -2) : name;\n}\n\nfunction getAllFormValues(container) {\n  var names = Array.from(container.elements).map(function (element) {\n    return element.name;\n  });\n  return names.reduce(function (obj, name) {\n    return (0, _extends2.default)({}, obj, _defineProperty({}, getPureName(name), getFormValue(container, name)));\n  }, {});\n}\n\nfunction toHaveFormValues(formElement, expectedValues) {\n  var _this = this;\n\n  (0, _utils.checkHtmlElement)(formElement, toHaveFormValues, this);\n\n  if (!formElement.elements) {\n    // TODO: Change condition to use instanceof against the appropriate element classes instead\n    throw new Error('toHaveFormValues must be called on a form or a fieldset');\n  }\n\n  var formValues = getAllFormValues(formElement);\n  return {\n    pass: Object.entries(expectedValues).every(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          name = _ref3[0],\n          expectedValue = _ref3[1];\n\n      return (0, _isEqualWith.default)(formValues[name], expectedValue, _utils.compareArraysAsSet);\n    }),\n    message: function message() {\n      var to = _this.isNot ? 'not to' : 'to';\n      var matcher = \"\".concat(_this.isNot ? '.not' : '', \".toHaveFormValues\");\n      var commonKeyValues = Object.keys(formValues).filter(function (key) {\n        return expectedValues.hasOwnProperty(key);\n      }).reduce(function (obj, key) {\n        return (0, _extends2.default)({}, obj, _defineProperty({}, key, formValues[key]));\n      }, {});\n      return [_this.utils.matcherHint(matcher, 'element', ''), \"Expected the element \".concat(to, \" have form values\"), _this.utils.diff(expectedValues, commonKeyValues)].join('\\n\\n');\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}