{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toBeVisible = toBeVisible;\n\nvar _utils = require(\"./utils\");\n\nfunction isStyleVisible(element) {\n  var getComputedStyle = element.ownerDocument.defaultView.getComputedStyle;\n\n  var _getComputedStyle = getComputedStyle(element),\n      display = _getComputedStyle.display,\n      visibility = _getComputedStyle.visibility,\n      opacity = _getComputedStyle.opacity;\n\n  return display !== 'none' && visibility !== 'hidden' && visibility !== 'collapse' && opacity !== '0' && opacity !== 0;\n}\n\nfunction isAttributeVisible(element, previousElement) {\n  var detailsVisibility;\n\n  if (previousElement) {\n    detailsVisibility = element.nodeName === 'DETAILS' && previousElement.nodeName !== 'SUMMARY' ? element.hasAttribute('open') : true;\n  } else {\n    detailsVisibility = element.nodeName === 'DETAILS' ? element.hasAttribute('open') : true;\n  }\n\n  return !element.hasAttribute('hidden') && detailsVisibility;\n}\n\nfunction isElementVisible(element, previousElement) {\n  return isStyleVisible(element) && isAttributeVisible(element, previousElement) && (!element.parentElement || isElementVisible(element.parentElement, element));\n}\n\nfunction toBeVisible(element) {\n  var _this = this;\n\n  (0, _utils.checkHtmlElement)(element, toBeVisible, this);\n  var isInDocument = element.ownerDocument === element.getRootNode({\n    composed: true\n  });\n  var isVisible = isInDocument && isElementVisible(element);\n  return {\n    pass: isVisible,\n    message: function message() {\n      var is = isVisible ? 'is' : 'is not';\n      return [_this.utils.matcherHint(\"\".concat(_this.isNot ? '.not' : '', \".toBeVisible\"), 'element', ''), '', \"Received element \".concat(is, \" visible\").concat(isInDocument ? '' : ' (element is not in the document)', \":\"), \"  \".concat(_this.utils.printReceived(element.cloneNode(false)))].join('\\n');\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}