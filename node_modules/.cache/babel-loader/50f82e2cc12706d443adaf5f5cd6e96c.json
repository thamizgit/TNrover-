{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateNewValue = calculateNewValue;\n\nvar _selectionRange = require(\"./selectionRange\");\n\nvar _getValue2 = require(\"./getValue\");\n\nvar _isValidDateValue = require(\"./isValidDateValue\");\n\nvar _isValidInputTimeValue = require(\"./isValidInputTimeValue\");\n\nfunction calculateNewValue(newEntry, element) {\n  var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {\n    var _getValue;\n\n    return (_getValue = (0, _getValue2.getValue)(element)) != null ? _getValue :\n    /* istanbul ignore next */\n    '';\n  }();\n  var selectionRange = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : (0, _selectionRange.getSelectionRange)(element);\n  var deleteContent = arguments.length > 4 ? arguments[4] : undefined;\n  var selectionStart = selectionRange.selectionStart === null ? value.length : selectionRange.selectionStart;\n  var selectionEnd = selectionRange.selectionEnd === null ? value.length : selectionRange.selectionEnd;\n  var prologEnd = Math.max(0, selectionStart === selectionEnd && deleteContent === 'backward' ? selectionStart - 1 : selectionStart);\n  var prolog = value.substring(0, prologEnd);\n  var epilogStart = Math.min(value.length, selectionStart === selectionEnd && deleteContent === 'forward' ? selectionEnd + 1 : selectionEnd);\n  var epilog = value.substring(epilogStart, value.length);\n  var newValue = \"\".concat(prolog).concat(newEntry).concat(epilog);\n  var newSelectionStart = prologEnd + newEntry.length;\n\n  if (element.type === 'date' && !(0, _isValidDateValue.isValidDateValue)(element, newValue)) {\n    newValue = value;\n  }\n\n  if (element.type === 'time' && !(0, _isValidInputTimeValue.isValidInputTimeValue)(element, newValue)) {\n    if ((0, _isValidInputTimeValue.isValidInputTimeValue)(element, newEntry)) {\n      newValue = newEntry;\n    } else {\n      newValue = value;\n    }\n  }\n\n  return {\n    newValue: newValue,\n    newSelectionStart: newSelectionStart\n  };\n}","map":null,"metadata":{},"sourceType":"script"}