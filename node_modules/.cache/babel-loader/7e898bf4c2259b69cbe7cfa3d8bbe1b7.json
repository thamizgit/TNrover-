{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveClass = toHaveClass;\n\nvar _utils = require(\"./utils\");\n\nfunction getExpectedClassNamesAndOptions(params) {\n  var lastParam = params.pop();\n  var expectedClassNames, options;\n\n  if (typeof lastParam === 'object') {\n    expectedClassNames = params;\n    options = lastParam;\n  } else {\n    expectedClassNames = params.concat(lastParam);\n    options = {\n      exact: false\n    };\n  }\n\n  return {\n    expectedClassNames: expectedClassNames,\n    options: options\n  };\n}\n\nfunction splitClassNames(str) {\n  if (!str) {\n    return [];\n  }\n\n  return str.split(/\\s+/).filter(function (s) {\n    return s.length > 0;\n  });\n}\n\nfunction isSubset(subset, superset) {\n  return subset.every(function (item) {\n    return superset.includes(item);\n  });\n}\n\nfunction toHaveClass(htmlElement) {\n  var _this = this;\n\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveClass, this);\n\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n\n  var _getExpectedClassName = getExpectedClassNamesAndOptions(params),\n      expectedClassNames = _getExpectedClassName.expectedClassNames,\n      options = _getExpectedClassName.options;\n\n  var received = splitClassNames(htmlElement.getAttribute('class'));\n  var expected = expectedClassNames.reduce(function (acc, className) {\n    return acc.concat(splitClassNames(className));\n  }, []);\n\n  if (options.exact) {\n    return {\n      pass: isSubset(expected, received) && expected.length === received.length,\n      message: function message() {\n        var to = _this.isNot ? 'not to' : 'to';\n        return (0, _utils.getMessage)(_this, _this.utils.matcherHint(\"\".concat(_this.isNot ? '.not' : '', \".toHaveClass\"), 'element', _this.utils.printExpected(expected.join(' '))), \"Expected the element \".concat(to, \" have EXACTLY defined classes\"), expected.join(' '), 'Received', received.join(' '));\n      }\n    };\n  }\n\n  return expected.length > 0 ? {\n    pass: isSubset(expected, received),\n    message: function message() {\n      var to = _this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(_this, _this.utils.matcherHint(\"\".concat(_this.isNot ? '.not' : '', \".toHaveClass\"), 'element', _this.utils.printExpected(expected.join(' '))), \"Expected the element \".concat(to, \" have class\"), expected.join(' '), 'Received', received.join(' '));\n    }\n  } : {\n    pass: this.isNot ? received.length > 0 : false,\n    message: function message() {\n      return _this.isNot ? (0, _utils.getMessage)(_this, _this.utils.matcherHint('.not.toHaveClass', 'element', ''), 'Expected the element to have classes', '(none)', 'Received', received.join(' ')) : [_this.utils.matcherHint(\".toHaveClass\", 'element'), 'At least one expected class must be provided.'].join('\\n');\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}