{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toBePartiallyChecked = toBePartiallyChecked;\n\nvar _utils = require(\"./utils\");\n\nfunction toBePartiallyChecked(element) {\n  var _this = this;\n\n  (0, _utils.checkHtmlElement)(element, toBePartiallyChecked, this);\n\n  var isValidInput = function isValidInput() {\n    return element.tagName.toLowerCase() === 'input' && element.type === 'checkbox';\n  };\n\n  var isValidAriaElement = function isValidAriaElement() {\n    return element.getAttribute('role') === 'checkbox';\n  };\n\n  if (!isValidInput() && !isValidAriaElement()) {\n    return {\n      pass: false,\n      message: function message() {\n        return 'only inputs with type=\"checkbox\" or elements with role=\"checkbox\" and a valid aria-checked attribute can be used with .toBePartiallyChecked(). Use .toHaveValue() instead';\n      }\n    };\n  }\n\n  var isPartiallyChecked = function isPartiallyChecked() {\n    var isAriaMixed = element.getAttribute('aria-checked') === 'mixed';\n\n    if (isValidInput()) {\n      return element.indeterminate || isAriaMixed;\n    }\n\n    return isAriaMixed;\n  };\n\n  return {\n    pass: isPartiallyChecked(),\n    message: function message() {\n      var is = isPartiallyChecked() ? 'is' : 'is not';\n      return [_this.utils.matcherHint(\"\".concat(_this.isNot ? '.not' : '', \".toBePartiallyChecked\"), 'element', ''), '', \"Received element \".concat(is, \" partially checked:\"), \"  \".concat(_this.utils.printReceived(element.cloneNode(false)))].join('\\n');\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}